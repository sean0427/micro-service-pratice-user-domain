// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockauthRepo is a mock of authRepo interface.
type MockauthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockauthRepoMockRecorder
}

// MockauthRepoMockRecorder is the mock recorder for MockauthRepo.
type MockauthRepoMockRecorder struct {
	mock *MockauthRepo
}

// NewMockauthRepo creates a new mock instance.
func NewMockauthRepo(ctrl *gomock.Controller) *MockauthRepo {
	mock := &MockauthRepo{ctrl: ctrl}
	mock.recorder = &MockauthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthRepo) EXPECT() *MockauthRepoMockRecorder {
	return m.recorder
}

// ExamUserPassword mocks base method.
func (m *MockauthRepo) ExamUserPassword(ctx context.Context, name, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExamUserPassword", ctx, name, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExamUserPassword indicates an expected call of ExamUserPassword.
func (mr *MockauthRepoMockRecorder) ExamUserPassword(ctx, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExamUserPassword", reflect.TypeOf((*MockauthRepo)(nil).ExamUserPassword), ctx, name, password)
}
