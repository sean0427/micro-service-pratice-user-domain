// Code generated by MockGen. DO NOT EDIT.
// Source: grpc/auth.go

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockauthSerivice is a mock of authSerivice interface.
type MockauthSerivice struct {
	ctrl     *gomock.Controller
	recorder *MockauthSeriviceMockRecorder
}

// MockauthSeriviceMockRecorder is the mock recorder for MockauthSerivice.
type MockauthSeriviceMockRecorder struct {
	mock *MockauthSerivice
}

// NewMockauthSerivice creates a new mock instance.
func NewMockauthSerivice(ctrl *gomock.Controller) *MockauthSerivice {
	mock := &MockauthSerivice{ctrl: ctrl}
	mock.recorder = &MockauthSeriviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthSerivice) EXPECT() *MockauthSeriviceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockauthSerivice) Authenticate(ctx context.Context, name, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, name, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockauthSeriviceMockRecorder) Authenticate(ctx, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockauthSerivice)(nil).Authenticate), ctx, name, password)
}
